exportPattern("^[[:alpha:]]+")
importFrom("blackbox", "prepareData", "calcGCV", "blackbox.options", "isPointInCHull", "subHullWrapper",
           "resetCHull", "blackbox.getOption", "as.surface", "init_grid", "volTriangulationWrapper", 
           "locatePointinvT","volTriangulation","rvolTriangulation", "subsimplices.volTriangulation","rsimplex")
importFrom("graphics", "abline", "axis", "curve", "filled.contour", "lines", "par", "plot", "points", "plot.new", "text", "title")
importFrom("grDevices", "adjustcolor")
importFrom("methods", "slot", "new")
importFrom("mvtnorm", "dmvnorm", "rmvnorm")
importFrom("ranger", "ranger", "importance")
importFrom("numDeriv", "grad", "hessian", "jacobian")
importFrom("pbapply", "pblapply", "pboptions", "pbreplicate", "pbsapply")
importFrom("proxy", "dist")
#importFrom("Rmixmod", "mixmodCluster", "mixmodStrategy", "mixmodGaussianModel", "plotCluster")
importFrom("spaMM", "corrHLfit", "MaternCorr", "mapMM", "fitme", "spaMM.colors", "fixef", "filled.mapMM", 
           "spaMM.filled.contour", "HLCor", "HLfit", "spaMMplot2D", "get_residVar") ## doc'ed fns
importFrom("spaMM", "get_ranPars", "spaMM.getOption") 
importFrom("spaMM", "makeTicks", ".safe_opt") ## undoc fns
importFrom("stats", "deviance", "glm", "var", "as.formula", "cov", "dnorm", "fitted", "optim", "pchisq", "pnorm", "quantile",
           "predict", "qchisq", "runif", "uniroot", "binomial", "poisson", "constrOptim", "dchisq", "profile", "confint", "rnorm", 
           "Gamma", "pgamma", ## for the optional gamma-based LRT correcction, so might be removed later
           "na.omit", "model.frame")
importFrom("utils", "packageVersion", "setTxtProgressBar", "txtProgressBar", "packageDescription", "getS3method", "capture.output", 
           "head")
importFrom("viridis", "viridis")
#importFrom("mclust", "Mclust", "densityMclust", "mclustBIC", "sim") ## mclustBIC bc Mclust() -> as.name("mclustBIC") but many more pop up...
export(mapMM) ## from spaMM
export(resetCHull,isPointInCHull) ## from blackbox
export(init_grid) # from blackbox, needs to be doc'ed in Infusion itself as it is explicitly used in doc 

S3method(profile, SLik)
S3method(profile, SLik_j)
S3method(plot, SLik)
S3method(print, SLik)
S3method(print, SLik_j)
S3method(summary, SLik)
S3method(summary, SLik_j)
S3method(print, logLs)
S3method(summary, logLs)
S3method(plot, SLikp)
S3method(plot, SLik_j)
S3method(plot,MixmodResults)
S3method(plot, dMixmod)
S3method(print, SLikp)
S3method(summary, SLikp)
S3method(logLik,SLik)
S3method(logLik,SLik_j)
S3method(confint,SLik)
S3method(confint,SLik_j)
S3method(confint,SLikp)
S3method(predict,SLik)
S3method(predict,SLik_j)
S3method(predict,SLikp)
S3method(predict,dMixmod)
S3method(predict,MixmodResults)
S3method(predict,dMclust)
S3method(project,default)
S3method(project,character)
S3method(refine,SLik)
S3method(refine,SLik_j)
S3method(refine,SLikp)
S3method(refine,default)
S3method(summLik,SLik_j)
S3method(summLik,default)
S3method(infer_surface,logLs)
S3method(infer_surface,tailp)
S3method(calc.lrthreshold,SLik)
S3method(calc.lrthreshold,SLikp)
S3method(calc.lrthreshold,default)
S3method(get_from, SLik)
S3method(get_from, SLik_j)
S3method(get_from, default)
S3method("[", reftable)
